local camera = require "orthographic.camera"
local broadcast = require "ludobits.m.broadcast"

local aim_circle = "aim_circle"
local game_camera = hash("/game_camera")

go.property("gravity", -855)
go.property("friction", 8)
go.property("throw_velocity", 1140)


function init(self)
	local position = go.get_position()
	self.real_z = position.z
	self.touch_position = vmath.vector3()
	self.aim_direction = vmath.vector3()
	self.velocity = vmath.vector3()
	self.aim_points = {}
	self.state = hash("idle")
	self.aim_points = {}
	msg.post(aim_circle, "disable")
	
	self.input_state = hash("idle")
	msg.post(".", "acquire_input_focus")
end

function abs_clamp_right(val, max)
	local sign = 1
	if val < 0 then
		sign = -1
	end
	if math.abs(val) > max then
		return sign * max
	end

	return val
end

function circle_normalize(vec)
	local length = vmath.length(vec)
	if length > 200 then
		return vmath.normalize(vec)
	else
		return vmath.vector3(vec.x/200, vec.y/200, vec.z)
	end
end

function do_friction(x, k)
	local result = math.abs(x) - k
	if result < 0 then
		return 0
	else
		if x < 0 then
			return -result
		else
			return result
		end
	end
end

function way(position, dt, velocity, gravity, friction)
	local result = {
		position = vmath.vector3(position),
		velocity = vmath.vector3(velocity),
	}
	result.velocity.x = do_friction(velocity.x, friction * dt)
	result.velocity.y = velocity.y + gravity * dt
	result.position = result.position + (velocity + result.velocity) * dt * 0.5
	return result
end

function change_input_state(self, new_state, args)
	if new_state == hash("idle") then
		broadcast.send("pendulum_start")
		for i=1, #self.aim_points do
			go.delete(self.aim_points[i])
		end
		self.aim_points = {}
		self.aim_direction = -circle_normalize(args.touch_position - self.touch_position)
		
		msg.post("#", "throw", {direction = self.aim_direction})
		msg.post(aim_circle, "disable")
	elseif new_state == hash("aiming") then
		broadcast.send("pendulum_stop")
		self.touch_position = args.touch_position
		go.set_position(args.touch_position, aim_circle)
		
		msg.post(aim_circle, "enable")
	end
	self.input_state = new_state
end

function update(self, dt)
	if self.state == hash("flying") then
		local result = way(go.get_position(), dt, self.velocity, self.gravity, self.friction)
		self.velocity = result.velocity
		go.set_position(result.position)
	end
	if self.input_state == hash("aiming") then
		for i=#self.aim_points, 5 do
			local new_point = factory.create("#aim_point_factory")
			table.insert(self.aim_points, new_point)
		end
		for i = 1, #self.aim_points do
			local new_state = way(go.get_world_position(), 0.25 * i, self.velocity + self.aim_direction * 1140, self.gravity, self.friction)
			go.set_position(new_state.position, self.aim_points[i])
		end
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("stay") then
		go.set_parent(go.get_id(), sender)
		local position = go.get_position()
		position.x = 0
		position.y = 0
		go.set_position(position)
		self.velocity = vmath.vector3()
		self.state = hash("idle")
		msg.post("/go#main", "new_point")
	elseif message_id == hash("throw") and self.state == hash("idle") then
		go.set_parent(go.get_id(), nil, true)
		local position = go.get_position()
		position.z = self.real_z
		go.set_position(position)
		self.velocity = self.velocity + message.direction * self.throw_velocity
		self.state = hash("flying")
	end
end

function on_input(self, action_id, action)
	local action_position = camera.screen_to_world(game_camera, vmath.vector3(action.x, action.y, 0))
	if action_id == hash("touch") then
		if action.pressed and self.input_state == hash("idle") and self.state == hash("idle") then
			change_input_state(self, hash("aiming"), {touch_position=action_position})
		elseif action.released and self.input_state == hash("aiming") then
			change_input_state(self, hash("idle"), {touch_position=action_position})
		end
	elseif self.input_state == hash("aiming") then
		self.aim_direction = -circle_normalize(action_position - self.touch_position)
	end
end
